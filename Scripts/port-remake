#!/bin/sh -e

##########################################################################
#   Synopsis:
#       port-remake [--no-commit] [--no-check] [category/port]
#       
#   Description:
#       .B port-remake
#       is used to rebuild and reinstall
#       the port in the current working directory
#       following changes.  It optionally removes the distfile(s)
#       so that the fetch stage is tested, optionally regenerates
#       pkg-plist, allowing the user unlimited chances to make
#       manual changes, and optionally commits the changes after
#       a successful build and install.
#       
#   Arguments:
#       --no-commit     Don't prompt for or run commit
#       --no-check      Don't prompt for or run port-check
#       category/port   Alternative to CWD
#       
#   Returns:
#       0 on success, non-zero error codes otherwise
#
#   See also:
#       port-check(1), port-create(1), port-diff(1), port-mkpatch(1),
#       port-patch-edit(1), port-reinstall(1), port-restage(1)
##########################################################################

usage()
{
    printf "Usage: $0 [--no-commit] [--no-check] [category/port]\n"
    exit 64     # sysexits(3) EX_USAGE
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

while echo $1 | grep -q '^-'; do
    if [ 0$1 = 0--no-commit ]; then
	no_commit=1
    elif [ 0$1 = 0--no-check ]; then
	no_check=1
    fi
    shift
done

case $# in
0)
    ;;

1)
    : ${PORTSDIR:=/usr/ports}
    cd $PORTSDIR/$1
    ;;

*)
    usage
esac

: ${EDITOR:=vi}

pwd

printf "Remove distfile[s]? y/[n] "
read remove
if [ 0$remove = 0y ]; then
    make distclean
else
    make clean
fi

# Check for metaports
if fgrep -q MASTER_SITES Makefile || fgrep -q USE_GIT Makefile; then
    rm -f distinfo
    make makesum
fi

env BATCH=1 make depends

if [ -e pkg-plist ]; then
    printf "Regenerate plist? y/[n] "
    read regen
    if [ 0$regen = 0y ]; then
	make clean stage
	make makeplist > pkg-plist.new
	$EDITOR pkg-plist.new
	printf "Diff:\n"
	if ! diff -u pkg-plist pkg-plist.new; then
	    while [ 0$new_plist != 0i ]; do
		printf "(i)nstall new plist (e)dit (a)bort "
		read new_plist
		if [ 0$new_plist = 0i ]; then
		    mv -f pkg-plist.new pkg-plist
		elif [ 0$new_plist = 0e ]; then
		    $EDITOR pkg-plist.new
		    diff -u pkg-plist pkg-plist.new || true
		elif [ 0$new_plist = 0a ]; then
		    exit 0
		else
		    printf "Invalid selection.\n"
		fi
	    done
	    make clean
	else
	    printf "No changes to pkg-plist.\n"
	    rm -f pkg-plist.new
	fi
    fi
fi

if [ -z "$no_check" ]; then
    cat << EOM

=====================
Running port-check...
=====================

EOM
    port-check
fi

if [ 0$no_commit != 01 ]; then
    printf "Commit changes to port? y/[n] "
    read commit
    if [ 0$commit = 0y ]; then
	printf "Updating repo...\n"
	if [ -e ../.svn ]; then
	    svn up
	elif [ -e ../.git ]; then
	    git pull --rebase=false
	else
	    printf "This is neither a subversion nor a git repository.\n"
	    exit 1
	fi
	printf "Comitting changes...\n"
	if [ -e ../.svn ]; then
	    svn ci .
	elif [ -e ../.git ]; then
	    git commit .
	    git push
	fi
    fi
fi
