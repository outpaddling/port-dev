#!/bin/sh -e

##########################################################################
#   Synopsis:
#       port-grep [-f file] [-p prefix] pattern [grep-flags]
#       
#   Description:
#       .B Port-grep
#       searches a file (Makefile by default) of every port in the
#       tree for "pattern" using the standard grep(1) command.
#       The grep command can be fully controlled as normal by
#       supplying grep flags following "pattern".  The -f flag
#       tells port-grep to search "file" (e.g. pkg-plist) instead
#       of "Makefile".
#       
#   Arguments:
#       -p prefix   Prefix of ports tree (default ${PORTSDIR})
#       -f file     File within port to search (default Makefile)
#       pattern     Regular expression for which to search
#       grep-flags  Flags passed to grep(1) command
#       
#   Returns:
#       0 on success, non-zero error codes otherwise
#
#   Examples:
#       # Search for ports maintained by jwb@
#       port-grep '^MAINTAINER=.*jwb@'
#       # Search for ports that install a program called "fasda"
#       port-grep -f pkg-plist bin/fasda
#
#   See also:
#       grep(1), port-list(1), port-which(1)
#
#   Note:
#       Keep port-grep and pkg-grep in sync!
#
#   History:
#   Date        Name        Modification
#   2015-04-20  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 [-p prefix] [-f file] regular-expression [grep flags]\n"
    exit 1
}


##########################################################################
#   Main
##########################################################################

: ${PORTSDIR:=/usr/ports}

if [ `basename $0` = port-grep ]; then
    prefix=${PORTSDIR}
else
    prefix=$(auto-pkgsrc-dir)
fi

# Overwrite later if provided as an argument
filename='Makefile'

while [ 0`echo $1 | cut -c 1-1` = 0'-' ]; do
    case "$1" in
    -p)
	prefix=$2
	shift
	shift
	;;
    -f)
	filename="$2"
	shift
	shift
	;;
    *)
	usage
	;;
    esac
done

if [ $# -lt 1 ]; then
    usage
fi

re="$1"
shift
grep_flags="$@"

set +e
find $prefix -name $filename -depth 3 | xargs grep $grep_flags "$re"
