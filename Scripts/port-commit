#!/bin/sh -e

##########################################################################
#   Script description:
#       Commit a port via git
#       
#   History:
#   Date        Name        Modification
#   2021-04-12  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0 category/port\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}

##########################################################################
#   Main
##########################################################################

if [ $# != 1 ]; then
    usage
fi
port=$1
if ! echo $port | fgrep -q /; then
    usage
fi

: ${PORTSDIR:=/usr/ports}
cd $PORTSDIR

category=$(echo $port | cut -d / -f 1)
makefile=$category/Makefile

# FIXME: 
# printf "Did you run wip-test-dependents or otherwise test all dependent ports? y/[n] "
# printf "Dependent ports are:\n"
# port-show-dependents

# Make sure port is listed in category/Makefile
port_name=$(echo $port | cut -d / -f 2)
if ! fgrep -qw $port_name $makefile; then
    printf "Add $port_name to $makefile.\n"
    pause
    $EDITOR $makefile
fi

if grep -w wip $port/Makefile | grep -v '^CATEGORIES'; then
    printf "$port contains references to wip.  Please fix and try again.\n"
    exit 1
fi

read -p "Run port-check? y/[n] " check
if [ 0$check = 0y ]; then
    cd $port
    port-check
    cd ../..
fi

git status
if git status $port | fgrep -q "Untracked"; then
    printf "Untracked files detected.  Please clean up and try again.\n"
    exit 1
fi
pause
git diff $port $makefile || true
pause

read -p 'Proceed with commit? y/[n] ' proceed
if [ 0$proceed = 0y ]; then
    printf "Ensuring we're on the main branch...\n"
    git checkout main
    
    cat << EOM
    
If this is a new port, copy the text below for the commmit message:

EOM
    printf "${port}: "
    grep '^COMMENT' $port/Makefile | cut -f 2-
    printf "\n"
    cat $port/pkg-descr
    
    cat << EOM
    
If this is an update, copy the text below for the commmit message:

EOM
    printf "${port}: "
    printf "Update to "
    auto-print-make-variable $port PKGVERSION
    printf "\n"
    pause

    git commit $port $makefile

    git status
    read -p 'Push commits? y/[n] ' push
    
    if [ 0$push = 0y ]; then
	port-push-commits
    fi
fi
